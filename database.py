import uuid
import time

import asyncio
import asyncpg

import os
import dotenv
import numpy as np
import pandas as pd

dotenv.load_dotenv()

dbname = os.getenv("DB_NAME")
user = os.getenv("DB_USER")
password = os.getenv("DB_PASSWORD")
host = os.getenv("DB_HOST")
port = os.getenv("DB_PORT")

async def connect_db(database, user, password, host="localhost", port="5432"):
    try:
        pool = await asyncpg.create_pool(
            database=database,
            user=user,
            password=password,
            host=host,
            port=port,
            min_size=1,
            max_size=20
        )
        print(f"‚úÖ Successfully connected to {dbname} at {host}:{port}")
        return pool
    except asyncpg.PostgresError as e:
        print(f"‚ùå Error connecting to database: {e}")
        return None


async def create_table_if_not_exists(pool: asyncpg.pool.Pool, table_name, df):
    """Create table if it doesn't exist based on DataFrame structure"""

    df.columns = df.columns.str.lower()  # Chuy·ªÉn t·∫•t c·∫£ t√™n c·ªôt v·ªÅ ch·ªØ th∆∞·ªùng
    # X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu PostgreSQL d·ª±a tr√™n pandas dtypes
    columns = []
    for col, dtype in zip(df.columns, df.dtypes):
        if col == 'time_zone':
            pg_type = 'TEXT'
        elif col == 'transaction_id':
            pg_type = 'TEXT'
        elif col == 'date_time_trade':
            pg_type = 'TEXT'
        elif col == 'date':
            pg_type = 'TEXT'
        elif col == 'settle_date':
            pg_type = 'TEXT'
        elif pd.api.types.is_integer_dtype(dtype):
            # Ki·ªÉm tra n·∫øu gi√° tr·ªã t·ªëi ƒëa v∆∞·ª£t qu√° gi·ªõi h·∫°n int32
            if df[col].max() > 2147483647:
                pg_type = "BIGINT"
            else:
                pg_type = "INTEGER"
        elif pd.api.types.is_float_dtype(dtype):
            pg_type = "NUMERIC"
        elif pd.api.types.is_bool_dtype(dtype):
            pg_type = "BOOLEAN"
        elif pd.api.types.is_datetime64_any_dtype(dtype) or "date" in col or "time" in col:
            pg_type = "TIMESTAMP"
        else:
            pg_type = "TEXT"

        columns.append(f'"{col}" {pg_type}')

    # Set primary key cho c·ªôt ƒë·∫ßu ti√™n
    if columns:
        columns[0] = columns[0] + " PRIMARY KEY"

    # T·∫°o c√¢u l·ªánh SQL
    create_table_query = f"CREATE TABLE IF NOT EXISTS {table_name} ({', '.join(columns)});"

    async with pool.acquire() as conn:
        try:
            await conn.execute(create_table_query)
            print(f"‚úÖ Table '{table_name}' created successfully")
        except asyncpg.PostgresError as e:
            print(f"‚ùå Error creating table '{table_name}': {e}")


async def insert_data_in_batches(pool: asyncpg.pool.Pool, table_name, df, batch_size=10000):
    """Chia d·ªØ li·ªáu th√†nh batch, d√πng Connection Pool v√† insert song song v√†o PostgreSQL"""
    # K·∫øt n·ªëi ƒë·∫øn PostgreSQL b·∫±ng Connection Pool

    # Chu·∫©n b·ªã c·ªôt v√† query INSERT ƒë·ªông
    columns = list(df.columns)
    columns_str = ", ".join(columns)
    values_placeholders = ", ".join(f"${i + 1}" for i in range(len(columns)))  # asyncpg d√πng $1, $2...
    query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({values_placeholders})"

    # Chuy·ªÉn DataFrame th√†nh danh s√°ch tuple
    data_tuples = [
        tuple(x if pd.notna(x) else None for x in row)
        for row in df.to_numpy()
    ]



    async with pool:  # T·ª± ƒë·ªông ƒë√≥ng pool sau khi ho√†n th√†nh
        # Chia d·ªØ li·ªáu th√†nh nhi·ªÅu batch nh·ªè
        batches = np.array_split(data_tuples, len(data_tuples) // batch_size + 1)

        # Ch√®n d·ªØ li·ªáu theo t·ª´ng batch
        async def insert_batch(batch):
            async with pool.acquire() as conn:  # M∆∞·ª£n k·∫øt n·ªëi t·ª´ pool
                try:
                    await conn.executemany(query, batch)
                    print(f"‚úÖ Inserted {len(batch)} rows")
                except asyncpg.PostgresError as e:
                    print(f"‚ùå Error inserting batch: {e}")

        # T·∫°o danh s√°ch task insert song song

        tasks = [insert_batch(batch) for batch in batches]
        start_time = time.time()
        # Ch·∫°y t·∫•t c·∫£ c√°c task song song
        await asyncio.gather(*tasks)
        end_time = time.time()

    print(
        f"üéØ Done! Inserted {len(data_tuples)} rows in {end_time - start_time:.2f} seconds using batch size {batch_size}")


async def load_data_from_db(pool: asyncpg.pool.Pool, table_name) -> pd.DataFrame:
    """
    Load d·ªØ li·ªáu t·ª´ b·∫£ng trong PostgreSQL v√†o m·ªôt pandas DataFrame.
    """
    query = f"SELECT * FROM {table_name};"
    async with pool.acquire() as conn:
        rows = await conn.fetch(query)

    # Chuy·ªÉn danh s√°ch c√°c asyncpg Record th√†nh danh s√°ch dict
    data = [dict(row) for row in rows]

    # T·∫°o DataFrame t·ª´ danh s√°ch dict
    df_loaded = pd.DataFrame(data)

    return df_loaded if len(df_loaded) > 0 else None


async def upsert_data_in_batches(pool: asyncpg.pool.Pool, table_name, df, conflict_target, batch_size=10000):
    """
    Chia d·ªØ li·ªáu th√†nh batch v√† th·ª±c hi·ªán upsert (INSERT ... ON CONFLICT DO UPDATE) v√†o PostgreSQL.
    """
    # Chu·∫©n b·ªã danh s√°ch c·ªôt v√† c√°c placeholder
    columns = list(df.columns)

    columns_str = ", ".join(f'"{col}"' for col in columns)
    values_placeholders = ", ".join(f"${i + 1}" for i in range(len(columns)))

    # Danh s√°ch c√°c c·ªôt s·∫Ω c·∫≠p nh·∫≠t, lo·∫°i tr·ª´ conflict_target (v√† c√≥ th·ªÉ lo·∫°i b·ªè m·ªôt s·ªë c·ªôt n·∫øu c·∫ßn)
    update_columns = [col for col in columns if col not in {conflict_target, 'open_close','quantity','relatedtransactionid','dim_security_id','settle_date'}]
    update_assignments = ", ".join(f'"{col}" = EXCLUDED."{col}"' for col in update_columns)

    # C√¢u l·ªánh upsert, c·∫≠p nh·∫≠t lu√¥n updated_at = now()
    query = f"""
    INSERT INTO {table_name} ({columns_str})
    VALUES ({values_placeholders})
    ON CONFLICT ("{conflict_target}") DO UPDATE SET
      {update_assignments};
    """

    # Chuy·ªÉn DataFrame th√†nh danh s√°ch tuple, thay th·∫ø NaN b·∫±ng None
    data_tuples = [
        tuple(x if pd.notna(x) else None for x in row)
        for row in df.to_numpy()
    ]

    async with pool:  # S·ª≠ d·ª•ng pool v√† t·ª± ƒë·ªông ƒë√≥ng sau khi ho√†n th√†nh
        # Chia d·ªØ li·ªáu th√†nh nhi·ªÅu batch
        batches = np.array_split(data_tuples, len(data_tuples) // batch_size + 1)

        async def upsert_batch(batch):
            async with pool.acquire() as conn:
                try:
                    await conn.executemany(query, batch)
                    print(f"‚úÖ Upserted {len(batch)} rows")
                except asyncpg.PostgresError as e:
                    print(f"‚ùå Error upserting batch: {e}")

        tasks = [upsert_batch(batch) for batch in batches]
        start_time = time.time()
        await asyncio.gather(*tasks)
        end_time = time.time()

    print(
        f"üéØ Done! Upserted {len(data_tuples)} rows in {end_time - start_time:.2f} seconds using batch size {batch_size}"
    )

async def insert_table_data(pool: asyncpg.pool.Pool, table_name: str, dataframe: pd.DataFrame):

    # Ki·ªÉm tra k·∫øt n·ªëi
    try:
        async with pool.acquire() as conn:
            print("database is already")
    except asyncpg.PostgresError as e:
        print(f"error: {e}")

    # T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
    await create_table_if_not_exists(pool, table_name, dataframe)

    # Ch√®n d·ªØ li·ªáu theo batch
    await insert_data_in_batches(
        pool= pool,
        table_name='trades',
        df=dataframe,
        batch_size=100
    )
    await pool.close()


async def load(pool : asyncpg.pool.Pool,table_name: str) -> pd.DataFrame | None:
    try:
        df_from_db = await load_data_from_db(pool, table_name)
        print("D·ªØ li·ªáu ƒë∆∞·ª£c load t·ª´ database:")
        await pool.close()
        return df_from_db
    except asyncpg.PostgresError as e:
        print(f"‚ùå Error: {e}")
        return None

def transform_df(df: pd.DataFrame) -> pd.DataFrame:
    df.insert(0, 'self_generated_trade_id', [str(uuid.uuid4()) for _ in range(len(df))])
    df.insert(1, 'dim_security_id', [np.nan for value in range(len(df))])
    df['transaction_id'] = df['transaction_id'].astype(str)
    df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['remain'] = pd.to_numeric(df['remain'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['trade_price'] = pd.to_numeric(df['trade_price'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['taxes'] = pd.to_numeric(df['taxes'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['commission'] = pd.to_numeric(df['commission'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['cost_basis'] = pd.to_numeric(df['cost_basis'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['relatedtransactionid'] = pd.to_numeric(df['relatedtransactionid'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['remain'] = pd.to_numeric(df['remain'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
    df['settle_date'] = df['settle_date'].apply(
        lambda d: d.strftime("%Y-%m-%d") if pd.notnull(d) and not isinstance(d, str) else (d if pd.notnull(d) else None)
    )
    df['date'] = df['date'].apply(
        lambda d: d.strftime("%Y-%m-%d") if pd.notnull(d) and not isinstance(d, str) else (d if pd.notnull(d) else None)
    )
    df = df.where(pd.notnull(df), None)
    return df
# df = pd.read_csv('./result/trades.csv').drop(columns=['date'])


# columns = df.columns.tolist()
# data = df.loc[:].values.tolist()
# df.insert(0, 'self_generated_trade_id', [str(uuid.uuid4()) for _ in range(len(df))])
# df.insert(1,'dim_security_id', [np.nan for value in range(len(df))])
# df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['remain'] = pd.to_numeric(df['remain'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['trade_price'] = pd.to_numeric(df['trade_price'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['taxes'] = pd.to_numeric(df['taxes'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['commission'] = pd.to_numeric(df['commission'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['cost_basis'] = pd.to_numeric(df['cost_basis'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['relatedTransactionID'] = pd.to_numeric(df['relatedTransactionID'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë
# df['remain'] = pd.to_numeric(df['remain'], errors='coerce')  # Chuy·ªÉn th√†nh ki·ªÉu s·ªë


